# -*- shell-script -*-

echo this code was written for docker and needs to be modified for podman
exit 1

#
# Usage: test-dockers [-p period] number-from number-until
#
# as many times as there are integers between <from> and <until>,
# will spawn every <period> seconds a docker container named <image>-<i>
#

COMMAND=$(basename $0)

#################### globals
image=ubuntu
period=10
sequential=

####################

function usage() {
    echo "Usage: $COMMAND [-p period] [-i image] [-s] from until"
    echo "create a container (default ubuntu) for all <i>s in the range <from> .. <until>"
    echo "-s means sequential; docker run is not run in background here"
    exit 1
}

# parse args
while getopts ":p:i:s" opt; do
    case $opt in
	p)  period=$OPTARG ;;
	i)  image=$OPTARG ;;
	s)  sequential=true;; 
	\?) echo "Invalid option: -$OPTARG" >&2; usage ;;
	:)  echo "Option -$OPTARG requires an argument." >&2 ; exit 1 ;;
  esac
done
shift $((OPTIND-1))

from=$1 ; shift
to=$1; shift

[ -n "$from" -a -n "$to" ] || usage
[[ -z "$@" ]] || usage

contnames=""
for nb in $(seq $from $to); do
    contnames="$contnames $(printf $image-%04d $nb | sed -e 's,/,-,') "
done

[ -z "$sequential" ] && mode_message="sequentially" || mode_message="spawn in background"

echo $0 BEGIN - $(date)

# create one every <period> s
for contname in $contnames; do
    echo "=== $(date) mode=$mode_message period=$period; dealing with $contname"
    uptime
    command="docker run --name $contname -dit $image"
    if [ -z $sequential ]; then
	$command
    else
	$command &
    fi
    sleep $period
done

echo $0 END - $(date)
